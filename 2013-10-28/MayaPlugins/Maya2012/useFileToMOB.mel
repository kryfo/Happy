//////////////////////判断名字是否正确
source "useAffirmFileName.mel";
/////////////////////修改文件名
string $checkFileName=`file -q -sn`;
string $tmpLayerName=`match "\\([a-z]+_[a-z]+\\)" $checkFileName`;
string $layerName=`match "[a-z]+_[a-z]+" $tmpLayerName`;
string $layerRep=endString($layerName,3);
string $saveAsname = `substitute $layerRep $checkFileName "mob"`;
file  -rename $saveAsname;
//////////////////////设置MentalRay渲染器
if (!`pluginInfo -query -loaded "Mayatomr.mll"`)  loadPlugin "Mayatomr.mll";
miCreateDefaultNodes();
miCreateOtherOptionsNodesForURG();
setAttr "defaultRenderGlobals.ren"  -type "string" "mentalRay";
//////////////////////////////////////////设置PAL帧率
currentUnit -t pal -updateAnimation 1;
/////////////////////////设置输出规范
string $checkFileName=`file -q -sn -shn`;
string $SceneName=`match "e[0-9].*_p[0-9].*_s[0-9].*\\([0-9]+\\)"   $checkFileName`;
string $tmpLayerName=`match "\\([a-z]+_[a-z]+\\)" $checkFileName`;
string $layerName=`match "[a-z]+_[a-z]+" $tmpLayerName`;
if(($SceneName!="")||($layerName!=""))
{
setAttr -l false "defaultRenderGlobals.ifp";
setAttr -type "string" "defaultRenderGlobals.ifp"  ($SceneName+"."+$layerName);
}
else
{
setAttr -l false "defaultRenderGlobals.ifp";
setAttr -type "string" "defaultRenderGlobals.ifp"  "<Scene>";
}

setAttr -l false "defaultRenderGlobals.outf";
setAttr "defaultRenderGlobals.outf" 51;
setAttr "defaultRenderGlobals.imfkey" -type "string" "exr";

setAttr "defaultRenderGlobals.animation" 1;
setAttr "defaultRenderGlobals.putFrameBeforeExt" 1;
setAttr "defaultRenderGlobals.periodInExt" 1;
setAttr "defaultRenderGlobals.outFormatControl" 0;
setAttr "defaultRenderGlobals.extensionPadding" 4;

setAttr "defaultRenderGlobals.multiCamNamingMode" 1;
//设置首尾帧
string $checkFileName=`file -q -sn -shn`;
string $tempFileGiveFrame=`match "\\([0-9]+\\)" $checkFileName`;
string $FileGiveFrame=`match "[0-9]+" $tempFileGiveFrame`;
if(($FileGiveFrame!="")&&(int($FileGiveFrame)>100))
{
setAttr "defaultRenderGlobals.startFrame" 100;
setAttr "defaultRenderGlobals.endFrame" $FileGiveFrame;
playbackOptions -e -min 100 -max $FileGiveFrame;
playbackOptions -e -ast 100 -aet $FileGiveFrame;
}
else
{
setAttr "defaultRenderGlobals.startFrame" 100;
setAttr "defaultRenderGlobals.endFrame" 100;
playbackOptions -e -min 100 -max 101;
playbackOptions -e -ast 100 -aet 101;
}


setAttr "defaultRenderGlobals.modifyExtension" 0;
//setAttr "defaultRenderGlobals.startExtension" 1;
//setAttr "defaultRenderGlobals.byExtension" 1;

//setAttr "camera1.renderable" 1;

setAttr "defaultResolution.aspectLock" 0;
setAttr -l false "defaultResolution.w";
setAttr -l false "defaultResolution.h";
setAttr "defaultResolution.w" 1024;
setAttr "defaultResolution.h" 576;

setAttr -l false "defaultResolution.dar";
setAttr  "defaultResolution.dar" 1.777;

setAttr -l false "defaultResolution.pa";
setAttr "defaultResolution.pa" 1;

setAttr -l false "defaultRenderGlobals.enableDefaultLight";
setAttr "defaultRenderGlobals.enableDefaultLight" 0;

//////////////////////设置MotionBlur渲染层
if (`objExists "motionBlurPass"`)   delete motionBlurPass;

createNode renderPass -n "motionBlurPass";

setRenderPassType -type "MV2E" "motionBlurPass";

setAttr -type "string" motionBlurPass.passGroupName "MBP";

connectAttr -nextAvailable defaultRenderLayer.renderPass motionBlurPass.owner;

/////////////////////////////
setAttr "miDefaultOptions.scanline" 1;
setAttr "mentalrayGlobals.renderMode" 0;

setAttr -l false "miDefaultOptions.rayTracing";
setAttr "miDefaultOptions.rayTracing" 0;

setAttr "miDefaultOptions.shadowMethod" 0;

setAttr "miDefaultOptions.minSamples" 0;
setAttr "miDefaultOptions.maxSamples" 2;

setAttr -l false "miDefaultOptions.filter";
setAttr "miDefaultOptions.filter" 1;
setAttr "miDefaultOptions.filterWidth" 1.1;
setAttr "miDefaultOptions.filterHeight" 1.1;

setAttr "miDefaultOptions.jitter" 0;
setAttr "miDefaultOptions.sampleLock" 1;

setAttr "miDefaultOptions.motionBlur" 2;
setAttr "miDefaultOptions.motionBlurBy" 1;
setAttr "miDefaultOptions.shutterDelay" 0;
setAttr "miDefaultOptions.shutter" 1;
setAttr "miDefaultOptions.motionSteps" 1;
setAttr "miDefaultOptions.timeContrastR" 0.05;
setAttr "miDefaultOptions.timeContrastG" 0.05;
setAttr "miDefaultOptions.timeContrastB" 0.05;
setAttr "miDefaultOptions.timeContrastA" 0.05;

setAttr -l false "miDefaultFramebuffer.datatype";
setAttr "miDefaultFramebuffer.datatype" 5;

setAttr "defaultResolution.pa" 1;
//////////////////////////////////////////设置渲染相机
if((!`getAttr -l "perspShape.renderable"`))
{setAttr "perspShape.renderable" 0;}
if((!`getAttr -l "topShape.renderable"`))
{setAttr "topShape.renderable" 0;}
if((!`getAttr -l "frontShape.renderable"`))
{setAttr "frontShape.renderable" 0;}
if((!`getAttr -l "sideShape.renderable"`))
{setAttr "sideShape.renderable" 0;}

string $perspCameras[] = `listCameras -p`;
	for($rendercam in $perspCameras)
		{
	if((!`getAttr -l ($rendercam+".renderable")`)&&(!`gmatch $rendercam "persp"`))
			{ 
			  select   $rendercam;
	         setAttr  ($rendercam+".renderable") 1;
			} 
		}
/////////////////////////////////////////////////////////////////////
if (!`objExists MotionBlurshaderSG`)
	{sets -renderable true -noSurfaceShader true -empty -name MotionBlurshaderSG;}
if (!`objExists MotionBlurshader`)
    {
     string $shader = `shadingNode -asShader surfaceShader - n MotionBlurshader`;
	  setAttr "MotionBlurshader.outColor" -type double3 1 1 1 ;
    }
if(`isConnected MotionBlurshader.outColor MotionBlurshaderSG.surfaceShader`==0)
	{connectAttr -f MotionBlurshader.outColor MotionBlurshaderSG.surfaceShader;}

////////////////////////////////////////////////
string $renderPass[] = `listTransforms "-type surfaceShape"`;
string $renderObj;
for($renderObj in $renderPass)
{
select $renderObj;
sets -e -forceElement MotionBlurshaderSG;
select -cl;
}
///////////////////////////////////
string $currentModelPanel=`getPanel -withFocus`;
modelEditor -edit -wireframeOnShaded 1 $currentModelPanel;
////////////////////////////////////////////////
///////////////隐藏灯光
string $lights[]=`ls -lights`;
for ($item in $lights)	{setAttr ($item+".v") 0;}

///////////////隐藏流体渲染属性
string $fluidshapes[] =`ls -type "fluidShape"`;
for($fluidone in $fluidshapes)
{
setAttr ($fluidone + ".primaryVisibility") 0;
select -cl;
}

/////////////////隐藏体积材质渲染属性
string $volumeFog[] =`ls -type "volumeFog"`;
for($item in $volumeFog)
{
 string $itemFog[]=`hyperShade -objects $item`;
 string $Fog[]=`ls -sl`;
	if(size($Fog)>0)
	{
  	 for($fogOne in $Fog)
	 {setAttr ($fogOne + ".primaryVisibility") 0;select -cl;}
	}
}
/////////////////隐藏体积灯光渲染属性
string $lightFog[] =`ls -type "lightFog"`;
for($item in $lightFog)
{
 string $itemFog[]=`hyperShade -objects $item`;
 string $Fog[]=`ls -sl`;
	if(size($Fog)>0)
	{
  	 for($fogOne in $Fog)
	 {setAttr ($fogOne + ".primaryVisibility") 0;select -cl;}
	}
}
/////////////////////////////////////
file -f -save;
